/*! tailwindcss v4.1.12 | MIT License | https://tailwindcss.com */
@layer properties;
.drawer-side {
  pointer-events: none;
  visibility: hidden;
  position: fixed;
  inset-inline-start: calc(0.25rem * 0);
  top: calc(0.25rem * 0);
  z-index: 10;
  grid-column-start: 1;
  grid-row-start: 1;
  display: grid;
  width: 100%;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  grid-template-rows: repeat(1, minmax(0, 1fr));
  align-items: flex-start;
  justify-items: start;
  overflow-x: hidden;
  overflow-y: hidden;
  overscroll-behavior: contain;
  opacity: 0%;
  transition: opacity 0.2s ease-out 0.1s allow-discrete, visibility 0.3s ease-out 0.1s allow-discrete;
  height: 100vh;
  height: 100dvh;
  > .drawer-overlay {
    position: sticky;
    top: calc(0.25rem * 0);
    cursor: pointer;
    place-self: stretch;
    background-color: oklch(0% 0 0 / 40%);
  }
  > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  > *:not(.drawer-overlay) {
    will-change: transform;
    transition: translate 0.3s ease-out;
    translate: -100%;
    [dir="rtl"] & {
      translate: 100%;
    }
  }
}
.drawer-open {
  > .drawer-side {
    overflow-y: auto;
  }
  > .drawer-toggle {
    display: none;
    & ~ .drawer-side {
      pointer-events: auto;
      visibility: visible;
      position: sticky;
      display: block;
      width: auto;
      overscroll-behavior: auto;
      opacity: 100%;
      & > .drawer-overlay {
        cursor: default;
        background-color: transparent;
      }
      & > *:not(.drawer-overlay) {
        translate: 0%;
        [dir="rtl"] & {
          translate: 0%;
        }
      }
    }
    &:checked ~ .drawer-side {
      pointer-events: auto;
      visibility: visible;
    }
  }
}
.drawer-toggle {
  position: fixed;
  height: calc(0.25rem * 0);
  width: calc(0.25rem * 0);
  appearance: none;
  opacity: 0%;
  &:checked {
    & ~ .drawer-side {
      pointer-events: auto;
      visibility: visible;
      overflow-y: auto;
      opacity: 100%;
      & > *:not(.drawer-overlay) {
        translate: 0%;
      }
    }
  }
  &:focus-visible ~ .drawer-content label.drawer-button {
    outline: 2px solid;
    outline-offset: 2px;
  }
}
.dropdown {
  position: relative;
  display: inline-block;
  position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
  & > *:not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
    @media (forced-colors: active) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .dropdown-content {
    position: absolute;
  }
  &:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) {
    .dropdown-content {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
  }
  &[popover], .dropdown-content {
    z-index: 999;
    @media (prefers-reduced-motion: no-preference) {
      animation: dropdown 0.2s;
      transition-property: opacity, scale, display;
      transition-behavior: allow-discrete;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
  }
  @starting-style {
    &[popover], .dropdown-content {
      scale: 95%;
      opacity: 0;
    }
  }
  &.dropdown-open, &:not(.dropdown-hover):focus, &:focus-within {
    > [tabindex]:first-child {
      pointer-events: none;
    }
    .dropdown-content {
      opacity: 100%;
    }
  }
  &.dropdown-hover:hover {
    .dropdown-content {
      opacity: 100%;
      scale: 100%;
    }
  }
  &:is(details) {
    summary {
      &::-webkit-details-marker {
        display: none;
      }
    }
  }
  &.dropdown-open, &:focus, &:focus-within {
    .dropdown-content {
      scale: 100%;
    }
  }
  &:where([popover]) {
    background: #0000;
  }
  &[popover] {
    position: fixed;
    color: inherit;
    @supports not (position-area: bottom) {
      margin: auto;
      &.dropdown-open:not(:popover-open) {
        display: none;
        transform-origin: top;
        opacity: 0%;
        scale: 95%;
      }
      &::backdrop {
        background-color: color-mix(in oklab, #000 30%, #0000);
      }
    }
    &:not(.dropdown-open, :popover-open) {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
  }
}
.btn {
  :where(&) {
    width: unset;
  }
  display: inline-flex;
  flex-shrink: 0;
  cursor: pointer;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: center;
  gap: calc(0.25rem * 1.5);
  text-align: center;
  vertical-align: middle;
  outline-offset: 2px;
  webkit-user-select: none;
  user-select: none;
  padding-inline: var(--btn-p);
  color: var(--btn-fg);
  --tw-prose-links: var(--btn-fg);
  height: var(--size);
  font-size: var(--fontsize, 0.875rem);
  font-weight: 600;
  outline-color: var(--btn-color, var(--color-base-content));
  transition-property: color, background-color, border-color, box-shadow;
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  transition-duration: 0.2s;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  background-color: var(--btn-bg);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--btn-noise);
  border-width: var(--border);
  border-style: solid;
  border-color: var(--btn-border);
  text-shadow: 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 0.15));
  touch-action: manipulation;
  box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 6%)) inset, var(--btn-shadow);
  --size: calc(var(--size-field, 0.25rem) * 10);
  --btn-bg: var(--btn-color, var(--color-base-200));
  --btn-fg: var(--color-base-content);
  --btn-p: 1rem;
  --btn-border: var(--btn-bg);
  @supports (color: color-mix(in lab, red, red)) {
    --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
  }
  --btn-shadow: 0 3px 2px -2px var(--btn-bg),
    0 4px 3px -2px var(--btn-bg);
  @supports (color: color-mix(in lab, red, red)) {
    --btn-shadow: 0 3px 2px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000),
    0 4px 3px -2px color-mix(in oklab, var(--btn-bg) calc(var(--depth) * 30%), #0000);
  }
  --btn-noise: var(--fx-noise);
  .prose & {
    text-decoration-line: none;
  }
  @media (hover: hover) {
    &:hover {
      --btn-bg: var(--btn-color, var(--color-base-200));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
      }
    }
  }
  &:focus-visible, &:has(:focus-visible) {
    outline-width: 2px;
    outline-style: solid;
    isolation: isolate;
  }
  &:active:not(.btn-active) {
    translate: 0 0.5px;
    --btn-bg: var(--btn-color, var(--color-base-200));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 5%);
    }
    --btn-border: var(--btn-color, var(--color-base-200));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-border: color-mix(in oklab, var(--btn-color, var(--color-base-200)), #000 7%);
    }
    --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
  }
  &:is(:disabled, [disabled], .btn-disabled) {
    &:not(.btn-link, .btn-ghost) {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      box-shadow: none;
    }
    pointer-events: none;
    --btn-border: #0000;
    --btn-noise: none;
    --btn-fg: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
    }
    @media (hover: hover) {
      &:hover {
        pointer-events: none;
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 20%, transparent);
        }
        --btn-border: #0000;
        --btn-fg: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          --btn-fg: color-mix(in oklch, var(--color-base-content) 20%, #0000);
        }
      }
    }
  }
  &:is(input[type="checkbox"], input[type="radio"]) {
    appearance: none;
    &::after {
      content: attr(aria-label);
    }
  }
  &:where(input:checked:not(.filter .btn)) {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
    isolation: isolate;
  }
}
.list {
  display: flex;
  flex-direction: column;
  font-size: 0.875rem;
  :where(.list-row) {
    --list-grid-cols: minmax(0, auto) 1fr;
    position: relative;
    display: grid;
    grid-auto-flow: column;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    word-break: break-word;
    grid-template-columns: var(--list-grid-cols);
    &:has(.list-col-grow:nth-child(1)) {
      --list-grid-cols: 1fr;
    }
    &:has(.list-col-grow:nth-child(2)) {
      --list-grid-cols: minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(3)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(4)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(5)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
    }
    &:has(.list-col-grow:nth-child(6)) {
      --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
        minmax(0, auto) 1fr;
    }
    :not(.list-col-wrap) {
      grid-row-start: 1;
    }
  }
  & > :not(:last-child) {
    &.list-row, .list-row {
      &:after {
        content: "";
        border-bottom: var(--border) solid;
        inset-inline: var(--radius-box);
        position: absolute;
        bottom: calc(0.25rem * 0);
        border-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
        }
      }
    }
  }
}
.toast {
  position: fixed;
  inset-inline-start: auto;
  inset-inline-end: calc(0.25rem * 4);
  top: auto;
  bottom: calc(0.25rem * 4);
  display: flex;
  flex-direction: column;
  gap: calc(0.25rem * 2);
  background-color: transparent;
  translate: var(--toast-x, 0) var(--toast-y, 0);
  width: max-content;
  max-width: calc(100vw - 2rem);
  & > * {
    @media (prefers-reduced-motion: no-preference) {
      animation: toast 0.25s ease-out;
    }
  }
  &:where(.toast-start) {
    inset-inline-start: calc(0.25rem * 4);
    inset-inline-end: auto;
    --toast-x: 0;
  }
  &:where(.toast-center) {
    inset-inline-start: calc(1/2 * 100%);
    inset-inline-end: calc(1/2 * 100%);
    --toast-x: -50%;
  }
  &:where(.toast-end) {
    inset-inline-start: auto;
    inset-inline-end: calc(0.25rem * 4);
    --toast-x: 0;
  }
  &:where(.toast-bottom) {
    top: auto;
    bottom: calc(0.25rem * 4);
    --toast-y: 0;
  }
  &:where(.toast-middle) {
    top: calc(1/2 * 100%);
    bottom: auto;
    --toast-y: -50%;
  }
  &:where(.toast-top) {
    top: calc(0.25rem * 4);
    bottom: auto;
    --toast-y: 0;
  }
}
.input {
  cursor: text;
  border: var(--border) solid #0000;
  position: relative;
  display: inline-flex;
  flex-shrink: 1;
  appearance: none;
  align-items: center;
  gap: calc(0.25rem * 2);
  background-color: var(--color-base-100);
  padding-inline: calc(0.25rem * 3);
  vertical-align: middle;
  white-space: nowrap;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  font-size: 0.875rem;
  touch-action: manipulation;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  border-color: var(--input-color);
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  @supports (color: color-mix(in lab, red, red)) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  --size: calc(var(--size-field, 0.25rem) * 10);
  --input-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
  &:where(input) {
    display: inline-flex;
  }
  :where(input) {
    display: inline-flex;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
    &:focus, &:focus-within {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
  }
  :where(input[type="url"]), :where(input[type="email"]) {
    direction: ltr;
  }
  :where(input[type="date"]) {
    display: inline-flex;
  }
  &:focus, &:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  &:has(> input[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    box-shadow: none;
  }
  &:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  &::-webkit-date-and-time-value {
    text-align: inherit;
  }
  &[type="number"] {
    &::-webkit-inner-spin-button {
      margin-block: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * -3);
    }
  }
  &::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: 0.75em;
  }
  &:has(> input[type="date"]) {
    :where(input[type="date"]) {
      display: inline-flex;
      webkit-appearance: none;
      appearance: none;
    }
    input[type="date"]::-webkit-calendar-picker-indicator {
      position: absolute;
      inset-inline-end: 0.75em;
      width: 1em;
      height: 1em;
      cursor: pointer;
    }
  }
}
.select {
  border: var(--border) solid #0000;
  position: relative;
  display: inline-flex;
  flex-shrink: 1;
  appearance: none;
  align-items: center;
  gap: calc(0.25rem * 1.5);
  background-color: var(--color-base-100);
  padding-inline-start: calc(0.25rem * 3);
  padding-inline-end: calc(0.25rem * 7);
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  height: var(--size);
  font-size: 0.875rem;
  touch-action: manipulation;
  border-start-start-radius: var(--join-ss, var(--radius-field));
  border-start-end-radius: var(--join-se, var(--radius-field));
  border-end-start-radius: var(--join-es, var(--radius-field));
  border-end-end-radius: var(--join-ee, var(--radius-field));
  background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
  background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
  background-size: 4px 4px, 4px 4px;
  background-repeat: no-repeat;
  text-overflow: ellipsis;
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  @supports (color: color-mix(in lab, red, red)) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  border-color: var(--input-color);
  --input-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
  --size: calc(var(--size-field, 0.25rem) * 10);
  [dir="rtl"] & {
    background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
  }
  select {
    margin-inline-start: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -7);
    width: calc(100% + 2.75rem);
    appearance: none;
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 7);
    height: calc(100% - calc(var(--border) * 2));
    align-items: center;
    background: inherit;
    border-radius: inherit;
    border-style: none;
    &:focus, &:focus-within {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    &:not(:last-child) {
      margin-inline-end: calc(0.25rem * -5.5);
      background-image: none;
    }
  }
  &:focus, &:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  &:has(> select[disabled]), &:is(:disabled, [disabled]), fieldset:disabled & {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
  }
  &:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }
  &, & select {
    @supports (appearance: base-select) {
      appearance: base-select;
    }
    @supports (appearance: base-select) {
      &::picker(select) {
        appearance: base-select;
      }
    }
    &::picker(select) {
      color: inherit;
      max-height: min(24rem, 70dvh);
      border: var(--border) solid var(--color-base-200);
      margin-block: calc(0.25rem * 2);
      border-radius: var(--radius-box);
      padding: calc(0.25rem * 2);
      background-color: inherit;
      box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
      box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
    }
    &::picker-icon {
      display: none;
    }
    optgroup {
      padding-top: 0.5em;
      option {
        &:nth-child(1) {
          margin-top: 0.5em;
        }
      }
    }
    option {
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 3);
      padding-block: calc(0.25rem * 1.5);
      transition-property: color, background-color;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
      &:not(:disabled) {
        &:hover, &:focus-visible {
          cursor: pointer;
          background-color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
          }
          --tw-outline-style: none;
          outline-style: none;
          @media (forced-colors: active) {
            outline: 2px solid transparent;
            outline-offset: 2px;
          }
        }
        &:active {
          background-color: var(--color-neutral);
          color: var(--color-neutral-content);
          box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
        }
      }
    }
  }
}
.checkbox {
  border: var(--border) solid var(--input-color, var(--color-base-content));
  @supports (color: color-mix(in lab, red, red)) {
    border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
  }
  position: relative;
  display: inline-block;
  flex-shrink: 0;
  cursor: pointer;
  appearance: none;
  border-radius: var(--radius-selector);
  padding: calc(0.25rem * 1);
  vertical-align: middle;
  color: var(--color-base-content);
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
  transition: background-color 0.2s, box-shadow 0.2s;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: var(--size);
  height: var(--size);
  background-size: auto, calc(var(--noise) * 100%);
  background-image: none, var(--fx-noise);
  &:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  &:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }
  &:checked, &[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
    &:before {
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
      opacity: 100%;
    }
    @media (forced-colors: active) {
      &:before {
        rotate: 0deg;
        background-color: transparent;
        --tw-content: "✔︎";
        clip-path: none;
      }
    }
    @media print {
      &:before {
        rotate: 0deg;
        background-color: transparent;
        --tw-content: "✔︎";
        clip-path: none;
      }
    }
  }
  &:indeterminate {
    background-color: var(--input-color, var(--color-base-content));
    @supports (color: color-mix(in lab, red, red)) {
      background-color: var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
    &:before {
      rotate: 0deg;
      opacity: 100%;
      translate: 0 -35%;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
    }
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
}
.radio {
  position: relative;
  display: inline-block;
  flex-shrink: 0;
  cursor: pointer;
  appearance: none;
  border-radius: calc(infinity * 1px);
  padding: calc(0.25rem * 1);
  vertical-align: middle;
  border: var(--border) solid var(--input-color, currentColor);
  @supports (color: color-mix(in lab, red, red)) {
    border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
  }
  box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
  --size: calc(var(--size-selector, 0.25rem) * 6);
  width: var(--size);
  height: var(--size);
  color: var(--input-color, currentColor);
  &:before {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: calc(infinity * 1px);
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  &:focus-visible {
    outline: 2px solid currentColor;
  }
  &:checked, &[aria-checked="true"] {
    border-color: currentColor;
    background-color: var(--color-base-100);
    @media (prefers-reduced-motion: no-preference) {
      animation: radio 0.2s ease-out;
    }
    &:before {
      background-color: currentColor;
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
    }
    @media (forced-colors: active) {
      &:before {
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-offset: calc(1px * -1);
      }
    }
    @media print {
      &:before {
        outline: 0.25rem solid;
        outline-offset: -1rem;
      }
    }
  }
  &:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
}
.rating {
  position: relative;
  display: inline-flex;
  vertical-align: middle;
  & input {
    border: none;
    appearance: none;
  }
  :where(*) {
    height: calc(0.25rem * 6);
    width: calc(0.25rem * 6);
    border-radius: 0;
    background-color: var(--color-base-content);
    opacity: 20%;
    @media (prefers-reduced-motion: no-preference) {
      animation: rating 0.25s ease-out;
    }
    &:is(input) {
      cursor: pointer;
    }
  }
  & .rating-hidden {
    width: calc(0.25rem * 2);
    background-color: transparent;
  }
  input[type="radio"]:checked {
    background-image: none;
  }
  * {
    &:checked, &[aria-checked="true"], &[aria-current="true"], &:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"]) {
      opacity: 100%;
    }
    &:focus-visible {
      scale: 1.1;
      @media (prefers-reduced-motion: no-preference) {
        transition: scale 0.2s ease-out;
      }
    }
  }
  & *:active:focus {
    animation: none;
    scale: 1.1;
  }
  &.rating-xs :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 4);
    height: calc(0.25rem * 4);
  }
  &.rating-sm :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 5);
    height: calc(0.25rem * 5);
  }
  &.rating-md :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 6);
    height: calc(0.25rem * 6);
  }
  &.rating-lg :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 7);
    height: calc(0.25rem * 7);
  }
  &.rating-xl :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 8);
    height: calc(0.25rem * 8);
  }
}
.progress {
  position: relative;
  height: calc(0.25rem * 2);
  width: 100%;
  appearance: none;
  overflow: hidden;
  border-radius: var(--radius-box);
  background-color: currentColor;
  @supports (color: color-mix(in lab, red, red)) {
    background-color: color-mix(in oklab, currentColor 20%, transparent);
  }
  color: var(--color-base-content);
  &:indeterminate {
    background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
    background-size: 200%;
    background-position-x: 15%;
    @media (prefers-reduced-motion: no-preference) {
      animation: progress 5s ease-in-out infinite;
    }
    @supports (-moz-appearance: none) {
      &::-moz-progress-bar {
        background-color: transparent;
        @media (prefers-reduced-motion: no-preference) {
          animation: progress 5s ease-in-out infinite;
          background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
          background-size: 200%;
          background-position-x: 15%;
        }
      }
    }
  }
  @supports (-moz-appearance: none) {
    &::-moz-progress-bar {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
  @supports (-webkit-appearance: none) {
    &::-webkit-progress-bar {
      border-radius: var(--radius-box);
      background-color: transparent;
    }
    &::-webkit-progress-value {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
}
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.static {
  position: static;
}
.top-1\/2 {
  top: calc(1/2 * 100%);
}
.top-2\/3 {
  top: calc(2/3 * 100%);
}
.textarea {
  border: var(--border) solid #0000;
  min-height: calc(0.25rem * 20);
  flex-shrink: 1;
  appearance: none;
  border-radius: var(--radius-field);
  background-color: var(--color-base-100);
  padding-block: calc(0.25rem * 2);
  vertical-align: middle;
  width: clamp(3rem, 20rem, 100%);
  padding-inline-start: 0.75rem;
  padding-inline-end: 0.75rem;
  font-size: 0.875rem;
  touch-action: manipulation;
  border-color: var(--input-color);
  box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  @supports (color: color-mix(in lab, red, red)) {
    box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  --input-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
  }
  textarea {
    appearance: none;
    background-color: transparent;
    border: none;
    &:focus, &:focus-within {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
  }
  &:focus, &:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
  }
  &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    box-shadow: none;
  }
  &:has(> textarea[disabled]) > textarea[disabled] {
    cursor: not-allowed;
  }
}
.filter {
  display: flex;
  flex-wrap: wrap;
  input[type="radio"] {
    width: auto;
  }
  input {
    overflow: hidden;
    opacity: 100%;
    scale: 1;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
    &:not(:last-child) {
      margin-inline-end: calc(0.25rem * 1);
    }
    &.filter-reset {
      aspect-ratio: 1 / 1;
      &::after {
        content: "×";
      }
    }
  }
  &:not(:has(input:checked:not(.filter-reset))) {
    .filter-reset, input[type="reset"] {
      scale: 0;
      border-width: 0;
      margin-inline: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      padding-inline: calc(0.25rem * 0);
      opacity: 0%;
    }
  }
  &:has(input:checked:not(.filter-reset)) {
    input:not(:checked, .filter-reset, input[type="reset"]) {
      scale: 0;
      border-width: 0;
      margin-inline: calc(0.25rem * 0);
      width: calc(0.25rem * 0);
      padding-inline: calc(0.25rem * 0);
      opacity: 0%;
    }
  }
}
.mx-auto {
  margin-inline: auto;
}
.label {
  display: inline-flex;
  align-items: center;
  gap: calc(0.25rem * 1.5);
  white-space: nowrap;
  color: currentColor;
  @supports (color: color-mix(in lab, red, red)) {
    color: color-mix(in oklab, currentColor 60%, transparent);
  }
  &:has(input) {
    cursor: pointer;
  }
  &:is(.input > *, .select > *) {
    display: flex;
    height: calc(100% - 0.5rem);
    align-items: center;
    padding-inline: calc(0.25rem * 3);
    white-space: nowrap;
    font-size: inherit;
    &:first-child {
      margin-inline-start: calc(0.25rem * -3);
      margin-inline-end: calc(0.25rem * 3);
      border-inline-end: var(--border) solid currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
      }
    }
    &:last-child {
      margin-inline-start: calc(0.25rem * 3);
      margin-inline-end: calc(0.25rem * -3);
      border-inline-start: var(--border) solid currentColor;
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
      }
    }
  }
}
.carousel-item {
  box-sizing: content-box;
  display: flex;
  flex: none;
  scroll-snap-align: start;
}
.footer {
  display: grid;
  width: 100%;
  grid-auto-flow: row;
  place-items: start;
  column-gap: calc(0.25rem * 4);
  row-gap: calc(0.25rem * 10);
  font-size: 0.875rem;
  line-height: 1.25rem;
  & > * {
    display: grid;
    place-items: start;
    gap: calc(0.25rem * 2);
  }
  &.footer-center {
    grid-auto-flow: column dense;
    place-items: center;
    text-align: center;
    & > * {
      place-items: center;
    }
  }
}
.carousel {
  display: inline-flex;
  overflow-x: scroll;
  scroll-snap-type: x mandatory;
  scrollbar-width: none;
  @media (prefers-reduced-motion: no-preference) {
    scroll-behavior: smooth;
  }
  &::-webkit-scrollbar {
    display: none;
  }
}
.prose {
  :root & {
    --tw-prose-body: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
    --tw-prose-headings: var(--color-base-content);
    --tw-prose-lead: var(--color-base-content);
    --tw-prose-links: var(--color-base-content);
    --tw-prose-bold: var(--color-base-content);
    --tw-prose-counters: var(--color-base-content);
    --tw-prose-bullets: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
    --tw-prose-hr: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
    --tw-prose-quotes: var(--color-base-content);
    --tw-prose-quote-borders: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
    --tw-prose-captions: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
    --tw-prose-code: var(--color-base-content);
    --tw-prose-pre-code: var(--color-neutral-content);
    --tw-prose-pre-bg: var(--color-neutral);
    --tw-prose-th-borders: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
    --tw-prose-td-borders: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
    --tw-prose-kbd: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
    :where(code):not(pre > code) {
      background-color: var(--color-base-200);
      border-radius: var(--radius-selector);
      border: var(--border) solid var(--color-base-300);
      padding-inline: 0.5em;
      font-weight: inherit;
      &:before, &:after {
        display: none;
      }
    }
  }
}
.block {
  display: block;
}
.flex {
  display: flex;
}
.inline {
  display: inline;
}
.btn-circle {
  border-radius: calc(infinity * 1px);
  padding-inline: calc(0.25rem * 0);
  width: var(--size);
  height: var(--size);
}
.h-full {
  height: 100%;
}
.h-screen {
  height: 100vh;
}
.max-h-\[150px\] {
  max-height: 150px;
}
.min-h-screen {
  min-height: 100vh;
}
.w-full {
  width: 100%;
}
.max-w-\[55em\] {
  max-width: 55em;
}
.min-w-\[320px\] {
  min-width: 320px;
}
.flex-shrink {
  flex-shrink: 1;
}
.transform {
  transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
}
.skeleton {
  border-radius: var(--radius-box);
  background-color: var(--color-base-300);
  @media (prefers-reduced-motion: reduce) {
    transition-duration: 15s;
  }
  will-change: background-position;
  background-image: linear-gradient( 105deg, #0000 0% 40%, var(--color-base-100) 50%, #0000 60% 100% );
  background-size: 200% auto;
  background-repeat: no-repeat;
  background-position-x: -50%;
  @media (prefers-reduced-motion: no-preference) {
    animation: skeleton 1.8s ease-in-out infinite;
  }
}
.link {
  cursor: pointer;
  text-decoration-line: underline;
  &:focus {
    --tw-outline-style: none;
    outline-style: none;
    @media (forced-colors: active) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  &:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
}
.resize {
  resize: both;
}
.flex-col {
  flex-direction: column;
}
.flex-wrap {
  flex-wrap: wrap;
}
.items-center {
  align-items: center;
}
.justify-between {
  justify-content: space-between;
}
.justify-center {
  justify-content: center;
}
.overflow-x-hidden {
  overflow-x: hidden;
}
.overflow-y-scroll {
  overflow-y: scroll;
}
.border {
  border-style: var(--tw-border-style);
  border-width: 1px;
}
.\!bg-\[\#4c5c96\] {
  background-color: #4c5c96 !important;
}
.pr-\[10px\] {
  padding-right: 10px;
}
.outline {
  outline-style: var(--tw-outline-style);
  outline-width: 1px;
}
.filter {
  filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
}
.transition {
  transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
*, *::before, *::after {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
html {
  box-sizing: border-box;
}
*, *:before, *:after {
  box-sizing: inherit;
}
body {
  background-color: #2e3141;
  background-image: linear-gradient(to top, rgba(46, 49, 65, 0.8), rgba(46, 49, 65, 0.8)), url("../../images/bg.jpg");
  background-size: auto, cover;
  background-attachment: fixed, fixed;
  background-position: center, center;
}
body, input, textarea {
  color: #ffffff;
  font-family: "Source Sans Pro", Helvetica, sans-serif;
  font-size: clamp(12pt, 1.5vw, 16.5pt);
  font-weight: 300;
  line-height: 1.65;
}
p {
  margin: 0 0 2em 0;
}
@layer theme;
@layer base {
  body {
    color: #ffffff;
    font-family: "Source Sans Pro", Helvetica, sans-serif;
  }
  form {
    display: flex;
    flex-direction: column;
    gap: 0.5em;
  }
}
h1, h2, h3, h4, label {
  font-family: Raleway, Helvetica, sans-serif;
  letter-spacing: 0.1em;
  text-transform: uppercase;
  margin: 0 0 1em 0;
  font-weight: 200;
}
h1 {
  font-size: clamp(1.5em,1em + 2vw,2.25em);
  margin-bottom: 0.8em;
  padding-bottom: 0.4em;
}
h2 {
  font-size: clamp(0.75em, 0.48em + 1vw, 1.1em);
  line-height: 2;
}
h3 {
  font-size: clamp(1em, 50% + 1vw, 1.2em);
}
h4 {
  font-size: 0.9em;
}
label {
  font-size: 0.8em;
  font-weight: 700;
}
.major {
  padding-bottom: 1em;
  border-bottom: solid 2px rgba(255, 255, 255, 0.125);
}
input[type="text"],	input[type="password"],	input[type="email"],	textarea {
  background: rgba(255, 255, 255, 0.025);
  border-radius: 5px;
  border: none;
  border: solid 2px rgba(255, 255, 255, 0.125);
  color: inherit;
  resize: vertical;
  outline: 0;
  text-decoration: none;
  width: 100%;
}
input[type="text"]:invalid,	input[type="password"]:invalid,	input[type="email"]:invalid,	textarea:invalid {
  box-shadow: none;
}
input[type="text"]:focus,	input[type="password"]:focus,	input[type="email"]:focus,	textarea:focus {
  border-color: #5b6ba6;
}
input[type="text"],	input[type="password"],	input[type="email"] {
  height: 2.75em;
}
input[type="text"],	input[type="password"],	input[type="email"] {
  padding: 0 1em;
}
textarea {
  padding: 0.75em 1em;
}
input[type="submit"],	input[type="button"],	button,	.button {
  background-color: transparent;
  border-radius: 5px;
  border: 0;
  box-shadow: inset 0 0 0 2px rgba(255, 255, 255, 0.125);
  color: #ffffff !important;
  cursor: pointer;
  display: inline-block;
  font-family: Raleway, Helvetica, sans-serif;
  font-size: 0.8em;
  font-weight: 700;
  height: 3.75em;
  letter-spacing: 0.1em;
  line-height: 3.75em;
  padding: 0 2.25em;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;
}
input[type="submit"]:hover,	input[type="button"]:hover,	button:hover,	.button:hover {
  background-color: rgba(255, 255, 255, 0.025);
}
input[type="submit"]:active,	input[type="button"]:active,	button:active,	.button:active {
  background-color: rgba(255, 255, 255, 0.075);
}
.features {
  display: flex;
  flex-wrap: wrap;
  margin: 0 0 2em 0;
}
.features article {
  padding: 1.75em 1.75em 0.1em 1.75em;
  background-color: #353849;
  border-radius: 5px;
  margin: 1.5em 3em 1.5em 0;
  width: calc(50% - 1.5em);
}
.features article:nth-child(2n) {
  margin-right: 0;
}
.features article .image {
  border-radius: 5px 5px 0 0;
  display: block;
  margin-bottom: 1.75em;
  margin-left: -1.75em;
  margin-top: -1.75em;
  position: relative;
  width: calc(100% + 3.5em);
}
.features article .image img {
  border-radius: 5px 5px 0 0;
  width: 100%;
}
@media screen and (max-width: 980px) {
  .features article {
    margin: 1em 2em 1em 0;
    width: calc(50% - 1em);
  }
}
@media screen and (max-width: 736px) {
  .features article {
    padding: 1.5em 1.5em 0.1em 1.5em;
    margin: 0.875em 1.75em 0.875em 0;
    width: calc(50% - 0.875em - 1px);
  }
  .features article .image {
    margin-bottom: 1.5em;
    margin-left: -1.5em;
    margin-top: -1.5em;
    width: calc(100% + 3em);
  }
}
@media screen and (max-width: 480px) {
  .features {
    display: block;
  }
  .features article {
    width: 100%;
    margin: 0 0 2em 0 !important;
  }
}
#banner {
  padding: clamp(5em, 15vw, 10em) 2em clamp(1.75em, 8vw, 4.75em) 2em;
}
@layer utilities;
.wrapper {
  background-color: #2e3141;
  padding: clamp(2em,1vw,3em) 1.5em clamp(0.1em,1vw,1em) 1.5em;
  margin: 6.5em 0;
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
}
.wrapper:before, .wrapper:after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100' preserveAspectRatio='none'%3E%3Cpolygon points='0,100 100,0 100,100' style='fill:%232e3141%3B' /%3E%3C/svg%3E");
  box-shadow: inset 0 -1px 0 0 #2e3141, 0 1px 0 0 #2e3141;
}
.wrapper:before, .wrapper:after {
  background-repeat: no-repeat;
  background-size: 100% 100%;
  content: '';
  display: block;
  height: 6.5em;
  position: absolute;
  width: 100%;
}
.wrapper:before {
  top: -6.5em;
}
.wrapper:after {
  transform: scaleY(-1);
  bottom: -6.5em;
}
.wrapper.alt:before {
  transform: scaleX(-1);
}
.wrapper.alt:after {
  transform: scaleY(-1) scaleX(-1);
}
.wrapper .inner {
  max-width: 55em;
}
.wrapper.spotlight .inner {
  display: flex;
  align-items: center;
  flex-direction: row;
  gap: 2em;
}
.wrapper.spotlight:nth-child(2n - 1) .inner {
  flex-direction: row-reverse;
  text-align: right;
}
.wrapper.spotlight.style2 {
  background-color: #45558d;
}
.wrapper.spotlight.style2:before, .wrapper.spotlight.style2:after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100' preserveAspectRatio='none'%3E%3Cpolygon points='0,100 100,0 100,100' style='fill:%2345558d%3B' /%3E%3C/svg%3E");
  box-shadow: inset 0 -1px 0 0 #45558d, 0 1px 0 0 #45558d;
}
.wrapper.spotlight.style3 {
  background-color: #3f4e85;
}
.wrapper.spotlight.style3:before, .wrapper.spotlight.style3:after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100' preserveAspectRatio='none'%3E%3Cpolygon points='0,100 100,0 100,100' style='fill:%233f4e85%3B' /%3E%3C/svg%3E");
  box-shadow: inset 0 -1px 0 0 #3f4e85, 0 1px 0 0 #3f4e85;
}
.wrapper.spotlight {
  background-color: #4c5c96;
}
.wrapper.spotlight:before, .wrapper.spotlight:after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100' viewBox='0 0 100 100' preserveAspectRatio='none'%3E%3Cpolygon points='0,100 100,0 100,100' style='fill:%234c5c96%3B' /%3E%3C/svg%3E");
  box-shadow: inset 0 -1px 0 0 #4c5c96, 0 1px 0 0 #4c5c96;
}
.wrapper.spotlight .image {
  border-radius: 100%;
  width: 100%;
  min-width: 12em;
  max-width: clamp(12em,15em + .5vw,18em);
  overflow: hidden;
}
@media screen and (max-width: 980px) {
  .wrapper {
    margin: 4.75em 0;
  }
  .wrapper:before, .wrapper:after {
    height: 4.75em;
  }
  .wrapper:before {
    top: -4.75em;
  }
  .wrapper:after {
    bottom: -4.75em;
  }
}
@media screen and (max-width: 736px) {
  .wrapper {
    margin: 2.5em 0;
  }
  .wrapper:before, .wrapper:after {
    height: 2.5em;
  }
  .wrapper:before {
    top: -2.5em;
  }
  .wrapper:after {
    bottom: -2.5em;
  }
}
@media screen and (max-width: 480px) {
  .wrapper.spotlight .inner {
    display: block;
  }
}
#footer {
  padding: clamp(2em,1vw,3em) 1.5em clamp(4em,1vw,5em) 1.5em;
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
    @supports (color: color-mix(in lab, red, red)) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-border-style: solid;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
    }
  }
}
